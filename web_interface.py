#!/usr/bin/env python3
"""
Web Interface for Daily Vocabulary Bot
Provides a user-friendly web interface for configuration and management.
"""

import os
import json
import logging
import time
from flask import Flask, render_template, request, jsonify
from pathlib import Path
from functools import wraps

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.urandom(24).hex()

# Rate limiting storage
request_times = {}

def rate_limit(max_requests=10, window=60):
    """Rate limiting decorator - max_requests per window seconds."""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            client_ip = request.remote_addr
            current_time = time.time()
            
            # Clean old entries
            request_times[client_ip] = [t for t in request_times.get(client_ip, []) 
                                      if current_time - t < window]
            
            # Check rate limit
            if len(request_times[client_ip]) >= max_requests:
                return jsonify({'error': 'Rate limit exceeded. Please try again later.'}), 429
            
            # Add current request
            request_times[client_ip].append(current_time)
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def load_env_file():
    """Load current .env file content."""
    env_file = Path('.env')
    if not env_file.exists():
        return {}
    
    env_data = {}
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_data[key] = value
    except Exception as e:
        logger.error(f"Error reading .env file: {e}")
    
    return env_data

def save_env_file(env_data):
    """Save configuration to .env file."""
    env_file = Path('.env')
    
    try:
        # Create backup if file exists
        if env_file.exists():
            backup_file = Path('.env.backup')
            if backup_file.exists():
                backup_file.unlink()  # Remove old backup
            env_file.rename(backup_file)
        
        # Write new configuration
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write("# Daily Vocabulary Bot Configuration\n")
            f.write("# Generated by Web Interface\n\n")
            
            # Required fields
            f.write(f"RECIPIENT_EMAIL={env_data.get('RECIPIENT_EMAIL', '')}\n")
            f.write(f"GMAIL_USER={env_data.get('GMAIL_USER', '')}\n")
            f.write(f"GMAIL_APP_PASSWORD={env_data.get('GMAIL_APP_PASSWORD', '')}\n\n")
            
            # Optional fields
            f.write(f"BOT_NAME={env_data.get('BOT_NAME', 'Daily Vocabulary Bot')}\n")
            f.write(f"EMAIL_SUBJECT_PREFIX={env_data.get('EMAIL_SUBJECT_PREFIX', '📚')}\n")
            f.write(f"WORDS_PER_DAY={env_data.get('WORDS_PER_DAY', '2')}\n")
            f.write(f"SCHEDULE_TIME={env_data.get('SCHEDULE_TIME', '09:00')}\n")
            f.write(f"DATABASE_PATH={env_data.get('DATABASE_PATH', 'vocabulary.db')}\n")
            f.write(f"API_TIMEOUT={env_data.get('API_TIMEOUT', '10')}\n")
            f.write(f"LOG_LEVEL={env_data.get('LOG_LEVEL', 'INFO')}\n")
            f.write(f"LOG_FILE={env_data.get('LOG_FILE', 'vocabulary_bot.log')}\n")
        
        logger.info("Configuration saved successfully")
        
        # Force reload environment variables
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
            logger.info("Environment variables reloaded")
        except Exception as e:
            logger.warning(f"Could not reload environment: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error saving .env file: {e}")
        # Restore backup if save failed
        if Path('.env.backup').exists():
            try:
                if env_file.exists():
                    env_file.unlink()
                Path('.env.backup').rename(env_file)
                logger.info("Configuration restored from backup")
            except Exception as restore_error:
                logger.error(f"Failed to restore backup: {restore_error}")
        return False

@app.route('/')
def index():
    """Main configuration page."""
    env_data = load_env_file()
    return render_template('index.html', config=env_data)

@app.route('/api/config', methods=['GET'])
def get_config():
    """Get current configuration."""
    env_data = load_env_file()
    return jsonify(env_data)

@app.route('/api/validate-credentials', methods=['POST'])
@rate_limit(max_requests=5, window=300)  # 5 attempts per 5 minutes
def validate_credentials():
    """Validate Gmail credentials before saving."""
    try:
        data = request.get_json()
        
        # Check required fields
        if not data.get('GMAIL_USER') or not data.get('GMAIL_APP_PASSWORD'):
            return jsonify({'error': 'Gmail user and app password are required'}), 400
        
        gmail_user = data['GMAIL_USER']
        app_password = data['GMAIL_APP_PASSWORD']
        
        # Test the credentials by trying to send a test email
        try:
            import smtplib
            from email.mime.text import MIMEText
            from email.mime.multipart import MIMEMultipart
            
            # Create test email
            msg = MIMEMultipart()
            msg['From'] = gmail_user
            msg['To'] = gmail_user  # Send to self for testing
            msg['Subject'] = 'Daily Vocabulary Bot - Credential Test'
            
            body = "This is a test email to verify your Gmail credentials are working correctly."
            msg.attach(MIMEText(body, 'plain'))
            
            # Try to connect and send
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(gmail_user, app_password)
            
            # Send test email
            server.send_message(msg)
            server.quit()
            
            return jsonify({'valid': True, 'message': 'Credentials validated successfully!'})
            
        except smtplib.SMTPAuthenticationError:
            return jsonify({
                'valid': False, 
                'error': 'Invalid credentials. Please check your Gmail username and app password.',
                'clear_fields': ['GMAIL_USER', 'GMAIL_APP_PASSWORD']
            }), 401
            
        except smtplib.SMTPException as e:
            return jsonify({
                'valid': False, 
                'error': f'Gmail connection error: {str(e)}. Please check your internet connection.',
                'clear_fields': ['GMAIL_APP_PASSWORD']
            }), 500
            
        except Exception as e:
            return jsonify({
                'valid': False, 
                'error': f'Unexpected error: {str(e)}',
                'clear_fields': ['GMAIL_APP_PASSWORD']
            }), 500
            
    except Exception as e:
        logger.error(f"Error validating credentials: {e}")
        return jsonify({'error': f'Validation error: {str(e)}'}), 500

@app.route('/api/config', methods=['POST'])
@rate_limit(max_requests=10, window=300)  # 10 updates per 5 minutes
def update_config():
    """Update configuration."""
    try:
        data = request.get_json()
        
        # Validate required fields
        if not data.get('RECIPIENT_EMAIL'):
            return jsonify({'error': 'Recipient email is required'}), 400
        
        if not data.get('GMAIL_USER'):
            return jsonify({'error': 'Gmail user is required'}), 400
        
        if not data.get('GMAIL_APP_PASSWORD'):
            return jsonify({'error': 'Gmail app password is required'}), 400
        
        # Save configuration
        if save_env_file(data):
            return jsonify({'message': 'Configuration updated successfully'})
        else:
            return jsonify({'error': 'Failed to save configuration. Check file permissions.'}), 500
            
    except Exception as e:
        logger.error(f"Error updating configuration: {e}")
        return jsonify({'error': f'Configuration error: {str(e)}'}), 500

@app.route('/api/test')
def test_config():
    """Test current configuration."""
    try:
        # Force reload environment variables first
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
        except Exception as e:
            logger.warning(f"Could not reload environment: {e}")
        
        # Try to import and test configuration
        try:
            from config import Config
            is_valid, errors = Config.validate()
            
            if not is_valid:
                return jsonify({
                    'valid': False,
                    'errors': errors
                })
        except Exception as e:
            return jsonify({
                'valid': False,
                'errors': [f"Configuration error: {str(e)}"]
            })
        
        # Test database connection
        try:
            from database import Database
            db = Database(Config.DATABASE_PATH)
            db_info = db.get_database_info()
            db_status = 'connected'
        except Exception as e:
            db_status = f'error: {str(e)}'
            db_info = {}
        
        # Test word fetcher
        try:
            from word_fetcher import WordFetcher
            wf = WordFetcher()
            word_count = wf.get_fallback_word_count()
            api_status = 'available' if wf.test_api_connection() else 'unavailable'
        except Exception as e:
            api_status = f'error: {str(e)}'
            word_count = 0
        
        return jsonify({
            'valid': True,
            'database': {
                'status': db_status,
                'info': db_info
            },
            'word_fetcher': {
                'api_status': api_status,
                'fallback_words': word_count
            }
        })
        
    except Exception as e:
        logger.error(f"Error testing configuration: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/run-demo')
def run_demo_endpoint():
    """Run demo mode."""
    try:
        # Force reload environment variables first
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
        except Exception as e:
            logger.warning(f"Could not reload environment: {e}")
        
        from main import run_demo
        success = run_demo()
        
        if success:
            return jsonify({'message': 'Demo completed successfully'})
        else:
            return jsonify({'error': 'Demo failed'}), 500
            
    except Exception as e:
        logger.error(f"Error running demo: {e}")
        return jsonify({'error': f'Demo failed: {str(e)}'}), 500

@app.route('/api/run-bot')
def run_bot_endpoint():
    """Run the vocabulary bot."""
    try:
        # Force reload environment variables first
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
        except Exception as e:
            logger.warning(f"Could not reload environment: {e}")
        
        from main import main
        success = main()
        
        if success:
            return jsonify({'message': 'Bot completed successfully'})
        else:
            return jsonify({'error': 'Bot failed'}), 500
            
    except Exception as e:
        logger.error(f"Error running bot: {e}")
        return jsonify({'error': f'Bot failed: {str(e)}'}), 500

@app.route('/api/stats')
def get_stats():
    """Get bot statistics."""
    try:
        # Force reload environment variables first
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
        except Exception as e:
            logger.warning(f"Could not reload environment: {e}")
        
        # Try to get stats, but don't crash if config is missing
        try:
            from config import Config
            from database import Database
            
            db = Database(Config.DATABASE_PATH)
            db_info = db.get_database_info()
            
            # Add word count statistics
            total_words_sent = db.get_total_words_sent()
            words_sent_today = db.get_words_sent_today()
            
            return jsonify({
                'database': db_info,
                'config': {
                    'words_per_day': Config.WORDS_PER_DAY,
                    'schedule_time': Config.SCHEDULE_TIME,
                    'email_service': Config.get_email_service()
                },
                'statistics': {
                    'total_words_sent': total_words_sent,
                    'words_sent_today': words_sent_today,
                    'learning_progress': f"{total_words_sent} words learned so far"
                }
            })
        except Exception as e:
            return jsonify({
                'database': {'error': 'Configuration not set up'},
                'config': {'error': 'Configuration not set up'},
                'statistics': {'error': 'Statistics not available'}
            })
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """Health check endpoint for monitoring and load balancers."""
    try:
        # Basic health check
        return jsonify({
            'status': 'healthy',
            'timestamp': time.time(),
            'service': 'daily-vocab-bot',
            'version': '1.0.0'
        }), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': time.time()
        }), 500

if __name__ == '__main__':
    print("🌐 Starting Daily Vocabulary Bot Web Interface...")
    print("📱 Open your browser and go to: http://localhost:5000")
    print("🔧 Configure your bot settings through the web interface")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
